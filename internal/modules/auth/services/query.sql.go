// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package authServices

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (user_id, token, type, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id,
    user_id,
    token,
    type,
    expires_at,
    created_at
`

type CreateTokenParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Token     string    `json:"token"`
	Type      TokenType `json:"type"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.UserID,
		arg.Token,
		arg.Type,
		arg.ExpiresAt,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Type,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteToken, id)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id,
    user_id,
    token,
    type,
    expires_at,
    created_at
FROM tokens
WHERE token = $1
    AND type = $2
    AND user_id = $3
LIMIT 1
`

type GetTokenParams struct {
	Token  string    `json:"token"`
	Type   TokenType `json:"type"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetToken(ctx context.Context, arg GetTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, arg.Token, arg.Type, arg.UserID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Type,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTokenByCode = `-- name: GetTokenByCode :one
SELECT id,
    user_id,
    token,
    type,
    expires_at,
    created_at
FROM tokens
WHERE token = $1
`

func (q *Queries) GetTokenByCode(ctx context.Context, token string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokenByCode, token)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Type,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTokenByUserId = `-- name: GetTokenByUserId :one
SELECT id,
    user_id,
    token,
    type,
    expires_at,
    created_at
FROM tokens
WHERE user_id = $1
`

func (q *Queries) GetTokenByUserId(ctx context.Context, userID uuid.UUID) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUserId, userID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Type,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
