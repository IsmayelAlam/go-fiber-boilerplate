// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: authQuery.sql

package userServices

import (
	"context"

	"github.com/google/uuid"
)

const incrementFailedLogin = `-- name: IncrementFailedLogin :exec
UPDATE users
SET failed_login_attempts = failed_login_attempts + 1,
    locked_until = CASE
        WHEN failed_login_attempts + 1 >= 5 THEN CURRENT_TIMESTAMP + INTERVAL '15 minutes'
        ELSE locked_until
    END
WHERE id = $1
`

func (q *Queries) IncrementFailedLogin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, incrementFailedLogin, id)
	return err
}

const resetFailedLogin = `-- name: ResetFailedLogin :exec
UPDATE users
SET last_login_at = CURRENT_TIMESTAMP,
    failed_login_attempts = 0,
    locked_until = NULL
WHERE id = $1
`

func (q *Queries) ResetFailedLogin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, resetFailedLogin, id)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password_hash = $1
WHERE id = $2
`

type UpdatePasswordParams struct {
	PasswordHash string    `json:"-"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.PasswordHash, arg.ID)
	return err
}

const verifyUserEmail = `-- name: VerifyUserEmail :exec
UPDATE users
SET verified_email = true
WHERE id = $1
`

func (q *Queries) VerifyUserEmail(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, verifyUserEmail, id)
	return err
}
