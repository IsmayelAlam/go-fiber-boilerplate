// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package userServices

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash)
VALUES ($1, $2)
RETURNING id,
    email
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"-"`
}

type CreateUserRow struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET is_active = FALSE,
    deactivated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id,
    is_active,
    deactivated_at,
    version
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, email, email_normalized, password_hash, password_changed_at, name, verified_email, is_active, deactivated_at, created_at, updated_at, version, last_login_at, failed_login_attempts, locked_until
FROM users
ORDER BY name
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.EmailNormalized,
			&i.PasswordHash,
			&i.PasswordChangedAt,
			&i.Name,
			&i.VerifiedEmail,
			&i.IsActive,
			&i.DeactivatedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Version,
			&i.LastLoginAt,
			&i.FailedLoginAttempts,
			&i.LockedUntil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id,
    email,
    name,
    verified_email,
    password_hash,
    is_active,
    updated_at,
    last_login_at,
    locked_until,
    version
FROM users
WHERE email_normalized = LOWER($1)
LIMIT 1
`

type GetUserByEmailRow struct {
	ID            uuid.UUID    `json:"id"`
	Email         string       `json:"email"`
	Name          string       `json:"name"`
	VerifiedEmail bool         `json:"verified_email"`
	PasswordHash  string       `json:"-"`
	IsActive      bool         `json:"-"`
	UpdatedAt     time.Time    `json:"-"`
	LastLoginAt   sql.NullTime `json:"-"`
	LockedUntil   sql.NullTime `json:"-"`
	Version       int32        `json:"version"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, lower string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, lower)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.VerifiedEmail,
		&i.PasswordHash,
		&i.IsActive,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.LockedUntil,
		&i.Version,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id,
    email,
    name,
    verified_email,
    is_active,
    password_hash,
    updated_at,
    last_login_at,
    locked_until,
    version
FROM users
WHERE id = $1
LIMIT 1
`

type GetUserByIdRow struct {
	ID            uuid.UUID    `json:"id"`
	Email         string       `json:"email"`
	Name          string       `json:"name"`
	VerifiedEmail bool         `json:"verified_email"`
	IsActive      bool         `json:"-"`
	PasswordHash  string       `json:"-"`
	UpdatedAt     time.Time    `json:"-"`
	LastLoginAt   sql.NullTime `json:"-"`
	LockedUntil   sql.NullTime `json:"-"`
	Version       int32        `json:"version"`
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.VerifiedEmail,
		&i.IsActive,
		&i.PasswordHash,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.LockedUntil,
		&i.Version,
	)
	return i, err
}
